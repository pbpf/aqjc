#lang racket/base
(require racket/draw
         racket/class
         racket/string
         racket/format
         "configurator/main.rkt"
         "tools.rkt")

(define-sub-configurer draw-config (main-config-init-sub 'draw))
(provide draw-bm draw-nv6*)

(define (make-% a b)
  (if (= a 0)
      0.00
  ( / (round (*(/ a b )10000))
      100.0)))
;---------------------------------------------
(define-draw-config color-one   "darkorange")
(define-draw-config color-two   "royalblue")
(define-draw-config color-three   "red")
(define-draw-config small-problem-template   "一般问题 ~a%")
(define-draw-config big-problem-template   "较大问题 ~a%")
(define-draw-config badly-problem-template   "严重问题 ~a%")
(define-draw-config error-text-list   "技能差错,决策差错,知觉差错,习惯性违规,偶然性违规,作业环境,技术环境,操作者状态,操作者表现,不能识别危险,问题没有纠正,管理不到位,管理冲突,资源管理,组织氛围,组织程序")
(define-draw-config color-list "Blue,BlueViolet,Brown,BurlyWood,CadetBlue,Chartreuse,Chocolate,Coral,CornflowerBlue,Crimson,Cyan,DarkCyan,DarkGoldenRod,DarkGreen,DarkKhaki,DarkMagenta")
(define-draw-config color-label "颜色")
(define-draw-config category-label "类别")
(define-draw-config amount-label "数量")
(define-draw-config percentage-label "百分比")

;---------------------------------------------------
(define (draw-info dc x w h a b c)
  (send dc set-clipping-region #f)
  
  ;(send dc set-smoothing 'aligned)
  (define sum (+ a b c))
  (define h1 (* h 0.1))
  (define w1 (* w 0.3))
  (send dc set-pen color-one  1 'transparent)
  (send dc set-brush color-two  'solid)
  (send dc draw-rectangle x (* h 0.175) w1 h1)
  (send dc draw-text (format small-problem-template (make-% a sum)) (+ x w1 5)(* h 0.175))
  (send dc set-brush color-one 'solid)
  (send dc draw-rectangle x (* h 0.45) w1 h1)
  (send dc draw-text (format big-problem-template (make-% b sum))(+ x w1 5)(* h 0.45))
  (send dc set-brush color-three 'solid)
  (send dc draw-rectangle x (* h 0.725) w1 h1)
  (send dc draw-text (format badly-problem-template (make-% c sum)) (+ x w1 5)(* h 0.725))
  )
(define (draw-info* dc x w h wlst tlst clst)
  (send dc set-clipping-region #f)
  (send dc set-font (make-object font% (* 8 (/ h 200)) 'script 'italic 'normal #f 'smoothed))
  ;(send dc set-smoothing 'aligned)
  (define sum (for/sum([i (in-list wlst)])
                i))
  (define len (length wlst))
  (define h1 (* h 0.1))
  (define w1 (* w 0.3))
  (send dc set-pen "darkorange"  1 'transparent)
  (define h-start 40)
  (define h-rest (- h h-start))
   (send dc draw-text color-label x 0)
  (send dc draw-text category-label (+ x w1 5) 0)
  (send dc draw-text amount-label (+ x w1 (* 90 (/ h 200))) 0)
  (send dc draw-text percentage-label (+ x w1 (* 150 (/ h 200))) 0)
  (for([i(in-list wlst)]
       [k (in-naturals 0)]
       [t (in-list tlst)]
       [c (in-list clst)])
  (define y (+ h-start (* h-rest (/ k len))))
  (send dc set-brush c 'solid)
  (send dc draw-rectangle x y w1 h1)
    (send dc draw-text t (+ x w1 5)y)
    (send dc draw-text (format "~a" (~a i  #:width 7 #:pad-string " ")) (+ x w1 (* 90 (/ h 200)))y)
    (send dc draw-text (format "~a%"(~a (make-% i sum) #:width 5 #:pad-string "0")) (+ x w1 (* 150 (/ h 200)))y)
  ))
(define (draw-wedge* dc w h wlst clst)
  (define 2pi (* 2 3.1415926))
  (define sum (for/sum([i (in-list wlst)])
                i))
;  (send dc set-rotation  (/ 2pi 8))
  ;(send dc set-clipping-region #f)
  ;(send dc set-smoothing 'aligned)
;(send dc draw-spline 0 0 10 90 100 100)
  
  (for/fold([start 0]
            [sum1 0])
           ([i (in-list wlst)]
           [c (in-list clst)])
   ; (printf "~a ~a ~a\n" start sum1 c)
  (define rg (new region% [dc dc]))
  (send rg set-arc 0 0 w h start (* 2pi (/ (+ sum1 i) sum)))
  (send dc set-clipping-region rg)
  (send dc set-pen c 1 'transparent)
  (send dc set-brush c 'solid)
  (send dc draw-rectangle 0 0 w h)
    (values (* 2pi (/ (+ sum1 i) sum))
            (+ sum1 i)))
   ;(send dc set-rotation  0)
  (void))
;(send dc draw-rectangle 0 10 100 100)
(define (draw-wedge dc w h a b c)
  (define 2pi (* 2 3.1415926))
  (define sum (+ a b c))
  ;(send dc set-smoothing 'aligned)
;(send dc draw-spline 0 0 10 90 100 100)
  (define rg (new region% [dc dc]))
  (send rg set-arc 0 0 w h  0 (* 2pi (/ a sum)))
  (send dc set-clipping-region rg)
  (send dc set-pen color-one 1 'transparent)
  (send dc set-brush color-one 'solid)
  (send dc draw-rectangle 0 0 w h)
  (define rg2 (new region% [dc dc]))
  (send rg2 set-arc 0 0 w h (* 2pi (/ a sum)) (* 2pi (/ (+ b a) sum)))
  (send dc set-clipping-region rg2)
  (send dc set-pen color-two  1 'transparent)
  (send dc set-brush color-two 'solid)
  (send dc draw-rectangle 0 0 w h)
  (define rg3 (new region% [dc dc]))
  (send rg3 set-arc 0 0 w h (* 2pi (/ (+ b a) sum)) (* 3.1415926 2))
  (send dc set-clipping-region rg3)
  (send dc set-pen color-three  1 'transparent)
  (send dc set-brush color-three 'solid)
  (send dc draw-rectangle 0 0 w h))

(define(draw-bm w h a b c)
  (define target (make-bitmap w h)) ; A 30x30 bitmap
  (define dc (new bitmap-dc% [bitmap target]))
  (send dc set-smoothing 'aligned)
 ; (send dc set-pen "darkblue"  1 'solid)
  (if (> (+ a b c) 0)
    (draw-wedge dc h h a b c)
    (send dc draw-ellipse 0 0 h h))
    (draw-info  dc (+ h 20) (- w h 20) h a b c)
  target)

(define(draw-bm* w h wlst tlst clst)
  (define target (make-bitmap w h)) ; A 30x30 bitmap
  (define dc (new bitmap-dc% [bitmap target]))
  (send dc set-smoothing 'aligned)
 ; (send dc set-pen "darkblue"  1 'solid)
  (if (> (apply + wlst) 0)
    (draw-wedge* dc h h wlst clst)
    (send dc draw-ellipse 0 0 h h))
    (draw-info*  dc (+ h 20) (- w h 20) h  wlst tlst clst)
  target)
  
(define color-lst (string-split color-list ","))
(define text-list (string-split error-text-list ","))
;(draw-bm 450 200 0 0 0)
 ;
;(draw-bm* 450 200 (build-list 16 add1) text-list color-lst)
(define(draw-nv6* w h lst);1000 400
(draw-bm* w h lst text-list color-lst))
(module+ test
 ; (draw-nv6* (build-list 16 add1))
  )

                         